---
title: "R estimation and the renewal equation"
order: 5
---

```{r echo = FALSE}
set.seed(123)
```

# Objectives

The aim of this session is to introduce the renewal equation as an infection generating process, and to show how it can be used to estimate a time-varying reproduction number.

# Libraries used

In this session we will use the `nfidd` package to load the data set of infection times, the `dplyr` and `tidyr` packages for data wrangling, the `lubridate` package to handle dates, `ggplot2` library for plotting, the `here` library to find the stan model, and the `cmdstanr` library for using stan.
We will also use the `tidybayes` package for extracting results of the inference.

```{r libraries, message = FALSE}
library("nfidd")
library("dplyr")
library("tidyr")
library("lubridate")
library("ggplot2")
library("here")
library("cmdstanr")
library("tidybayes")
```

::: {.callout-tip}
The code in this session can be run as an interactive notebook using RStudio, or copied-and-pasted into an R session.
It needs to be run inside the course repository so that the `here()` commands below find the stan model files.
:::

# The renewal equation as a process model for infectious diseases

This session represents a shift from the models used in the previous session.
Whereas before we started from an existing time series of infections and modelled the process that resulted in these infections showing up as data, we now are concerned with a property of the infectious process themselves, specifically how many secondary infections are, on average, generated by each infectious individual.
That is, we are dealing with the reproduction number, $R$.

Remember that this is a more general concept than the _basic_ reproduction number $R_0$ which represents the average number of secondary infections caused by a single infectious individual in a completely susceptible population.
The reproduction number $R$ (sometimes called the _effective_ reproduction number) *more generally describes the average number of secondary infections caused by a single infectious individual and can in time and space as a function of differences in population level susceptibility, changes in behaviour, policy, seasonality etc.

In most mechanistic models of infectious diseases (starting with the simplest SIR model), *$* arises out of a combination of parameters and variables representing the system state, for example in a simple SIR model it can be calculated as $R_0 S/N$ where $S$ is the current number of susceptibles in the population of size $N$.
By fitting such models to data it is then possible to calculate the value of $R$ at any point in time.
The _renewal equation_ represents a more general model which includes the SIR model as a special case.
In its basic form it makes no assumption about the specific processes that cause $R$ to have a certain value and/or change over time, but instead it only relates the number of infected people in the population, the current value of the reproduction number and a delay distribution that represents the timings of when individuals infect others relative to when they themselves became infected, the so-called generation time.
Mathematically, it can be written as

$$
I_t = R_t \sum_{i=1}^{g_\mathrm{max}} I_{t-i} g_i
$$

Here, $I_t$ is the number of infected individuals on day $t$, $R_t$ is the current value of the reproduction number and $g_i$ is the probability of a secondary infection occurring $i$ days after the infector became infected themselves, with a maximum $g_\mathrm{max}$.
Remembering the previous session you will be able to identify that the renewal equation represents a convolution of the infection time series with itself, with the delay distribution given by $g_i$ and $R_t$ representing a scaling that is being applied.



::: {.callout-tip}
## Discrete vs. continuous renewal equation
The equation shown above represents the discrete version of the reproduction number.
Similar to discussions in the previous session this can be interpreted as a discretised version of a continuous one where the sum is replaced by an integral and the generation time distribution is continuous.
Note that in the discrete version we have started the sum at 1 and thus set $g_0=0$ which will make calculations easier.
:::

::: {.callout-tip}
## Instantaneous vs. case reproduction number
There are different definitions of the reproduction number that can be applied to the situation where it changes in time.
As it is defined above it is also called the _instantanous_ reproduction number because any change affects all currently infectious individual instantaneously.
Another example of a definition is the _case_ reproduction number, where changes affect individuals at the time that they are infected but then they have a constant reproduction number throughout their infectious period.
:::

# Simulating an epidemic using the renewal equation

With the theory out of the way we now turn to simulating an epidemic using the renewal equation.
We first write a function to simulate the epidemic using the discrete renewal equation.

```{r renewal_equation}
## function that takes three inputs to simulate using the renewal equation
## I0: the initial number of infections
## R: the reproduction number, given as a vector with one entry per time point
## gen_time: the generation time distribution, given as a vector with one entry
## per day after infection (the first element corresponding to one day after
## infection)
## example: renewal(5, c(rep(3, 4), rep(0.5, 5)), c(0.1, 0.2, 0.3, 0.2, 0.1))
renewal <- function(I0, R, gen_time) {
  max_gen_time <- length(gen_time)
  ## number of time points
  times <- length(R)
  I <- c(I0, rep(0, times)) ## set up vector holding number of infected
  ## iterate over time points
  for (t in 1:times) {
    ## calculate convolution
    first_index <- max(1, t - max_gen_time + 1)
    I_segment <- I[seq(first_index, t)]
    ## iterate over generation times
    ## take reverse of pmf and reverse if needed
    gen_pmf <- rev(gen_time)[seq_len(t - first_index + 1)]
    ## convolve infections with generation time
    I[t + 1] <- sum(I_segment * gen_pmf) * R[t]
  }
  return(I[-1]) ## remove I0 from time series
}
```

::: {.callout-note}
## Take 10 minutes
Try to understand the `renewal()` function above.
Compare it to the `convolve_with_delay()` function from the session on convolutions.
Can you explain the key differences between the two?
Try it with a few different probability distributions and parameters.
What kind of behaviours do you see depending on the values you put in?
:::

# Estimating R from a time series of infections

We now return to the time series of infections we used in the earlier sesssion on epidemiological delays.

```{r load_ts}
data(infection_times)
## assume a start date, e.g. 10 May of this year
start_date <- ymd("2024-05-10")
df <- infection_times |>
  mutate(
    infection_date = floor_date(start_date + infection_time, unit = "day")
  )
## infection time series
inf_infection_times <- df |>
  count(infection_date)
head(inf_time_series)
```

We use a renewal equation model in _stan_ to estimate the effective reproduction number throughout the outbreak.
As always we first load the stan model and spend some time trying to understand it.

```{r stan_estimate_r}
mod <- cmdstan_model(
  here(
    "sessions", "05-R-estimation-and-the-renewal-equation", "estimate-r.stan"
  )
)
mod$print(line_numbers = TRUE)
```

```{r r_fit}
data <- list(
  n = nrow(inf_time_series) - 1,
  obs = inf_time_series$n[-1],
  I0 = inf_time_series$n[1],
  gen_time_shape = 4,
  gen_time_rate = 1,
  gen_time_max = 28
)
r_fit <- mod$sample(
  data = data, refresh = 0, show_exceptions = FALSE, show_messages = FALSE
)
```

```{r r_plot}
# Extract posterior draws
r_posterior <- r_fit |>
  gather_draws(R[day]) |>
  group_by(day) |>
  summarise(
    median = median(.value),
    lower_90 = quantile(.value, 0.05),
    upper_90 = quantile(.value, 0.95),
    .groups = "drop"
  ) |>
  mutate(infection_date = inf_time_series$infection_date[-1])


ggplot(mapping = aes(x = infection_date)) +
  geom_ribbon(
    data = r_posterior,
    mapping = aes(ymin = lower_90, ymax = upper_90), alpha = 0.25, colour = NA
  )
```

# Going further

# References
