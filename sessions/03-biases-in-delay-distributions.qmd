---
title: "Biases in delay distributions"
order: 3
---

```{r echo = FALSE}
set.seed(123)
```

# Objectives

The aim of this session is to introduce some specific issues that arise when we use delay distributions to describe reporting in infectious disease epidemiology.
Specifically, we will consider two types of biases that commonly occur in infectious disease data: _censoring_ and _truncation_.


# Libraries used

In this session we will use the `nfidd` package to load a data set of infection times, the `ggplot2` package for plotting, the `dplyr` and `tidyr` packages to wrangle data, the `lubridate` package to deal with dates, the `here` package to find the stan models, and the `cmdstanr` package for using stan.

```{r libraries, message = FALSE}
library("nfidd")
library("ggplot2")
library("dplyr")
library("tidyr")
library("lubridate")
library("here")
library("cmdstanr")
```

## Create data set

We will use the same simulated data set as in the [previous session](02-delay-distributions) but introduce some typical properties of infectious disease data sets.

If you need to re-load the data, here is the code again from that session:

```{r inf_hosp_solution, file = here::here("snippets", "onset-hosp.r")}
```

## Dates, not days: censoring

Data on health outcomes are usually not recorded in the way that we have used so far in this session: as a numeric time since a given start date.
Instead, we usually deal with _dates_.
To simulate this, we can round down the infection times in the data set above using the `floor()` function:

```{r censored_times}
df_dates <- df |>
  mutate(
    infection_time = floor(infection_time),
    onset_time = floor(onset_time),
    hosp_time = floor(hosp_time)
  )
head(df_dates)
```

::: {.callout-note}
As before we are still not working with dates but numbers, which makes handling the data easier - we don't have to make any conversions before using the data in stan.
However, now these are integer numbers because we have rounded down the numbers using the `floor()` function.
Each of the numbers now represent the number of days that have passed since the start of the outbreak.
That is, each of the numbers correspond to a day.
In that sense, the data is more like typical data we get from infectious disease outbreaks.
:::

## Estimating delay distributions accounting for censoring

A naïve approach to estimating the delay from symptom onset to hospitalisation would be to ignore the fact that we have rounded down the times and just take use difference in days for the estimation.

```{r}
df_dates <- df_dates |>
  mutate(
    incubation_period = onset_time - infection_time,
    onset_to_hosp = hosp_time - onset_time
  )
```

::: {.callout-tip}
## Take 5 minutes
Fit the lognormal model used in the previous session to the estimates from the rounded data, i.e. using the `df_dates` data set.
Do you still recover the parameters that we put in?
:::

::: {.callout-note collapse="true"}
## Solution
```{r df_dates_solution}
mod <- cmdstan_model(here("stan", "lognormal.stan"))
res <- mod$sample(
  data = list(
    n = nrow(na.omit(df_dates)),
    y = na.omit(df_dates)$onset_to_hosp
  ),
  refresh = 0, show_exceptions = FALSE, show_messages = FALSE
)
res
```

Usually the estimates will be further from the "true" parameters than before when we worked with the unrounded data.
:::

If we want to modify the model in order to account for censoring, we need to take into account that we don't know when exactly on any given day the event happened.
For example, if we know that symptom onset of an individual occurred on 20 June, 2024, and they were admitted to hospital on 22 June, 2024, this could mean an onset-to-hospitalisation delay from 1 day (onset at 23:59 on the 20th, admitted at 0:01 on the 22nd) to 3 days (onset at 0:01 on the 20th, admitted at 23:59 on the 22nd).
We can use this in our delay estimation by making the exact time of the events based on the dates given part of the estimation procedure:

```{r censoring_adjusted_delay_model}
cmod <- cmdstan_model(here("stan", "censored_delay_model.stan"))
mod$print(line_numbers = TRUE)
```

::: {.callout-tip}
## Take 5 minutes
Familarise yourself with the model above.
Do you understand all the lines?
Which line(s) define the parameter prior distribution(s), which one(s) the likelihood, and which one(s) reflect that we have now provided the delay as the difference in integer days?
:::

::: {.callout-note collapse="true"}
## Solution
Lines 21-24 define the parametric prior distributions (for parameters meanlog and sdlog, and the estimates of exact times of events).
Line 26 defines the likelihood.
Lines 15-17 reflect the integer delays, adjusted by the estimated times of day
:::

Now we can use this model to re-estimate the parameters of the delay distribution:

```{r censored_estimate}
cres <- cmod$sample(
  data = list(
    n = nrow(na.omit(df_dates)),
    onset_to_hosp = na.omit(df_dates)$onset_to_hosp
  ),
  refresh = 0, show_exceptions = FALSE, show_messages = FALSE
)
cres
```

::: {.callout-tip}
## Take 10 minutes
Try re-simulating the delays using different parameters of the delay distribution.
Can you establish under which conditions the bias in estimation gets worse?
:::

## Real-time estimation: truncation

The data set we have looked at so far in this session is a "final" data set representing an outbreak that has come and gone.
However, information e.g. on delay distribution is often important during ongoing outbreaks as they can inform nowcasts and forecasts and help with broader interpretation of data.
Estimating delays in real time comes with particular challenges as the timing of the cut-off might introduce a bias.
If, for example, infections are exponentially increasing then there will be disproportionately more people with recent symptom onset, decreasing the estimate of the mean delay.
This happens because most infections are recent (due to the exponential increase), but later symptom onsets amongst these have not had a chance to happen yet.
Once again, we can simulate this effect, for example by imagining we would like to make an estimate on day 40.
Let us work with the un-censored data for the time from onset to hospitalisation so as to look at the issue of truncation in isolation:

```{r truncated_df}
df_rt <- df |>
  mutate(onset_to_hosp = hosp_time - onset_time) |>
  filter(hosp_time <= 40)
```

## Estimating delay distributions accounting for censoring

If we take the naïve mean of delays we get an underestimate as expected

```{r mean_truncated}
  mean(df_rt$onset_to_hosp)
```

::: {.callout-tip}
## Take 5 minutes
Fit the lognormal model used above to the estimates from the truncated data, i.e. using the `df_rt` data set.
How far away from the "true" parameters do you end up?
:::

::: {.callout-note collapse="true"}
## Solution
```{r df_rt_solution}
res <- mod$sample(
  data = list(
    n = nrow(na.omit(df_rt)),
    y = na.omit(df_rt)$onset_to_hosp
  ),
  refresh = 0, show_exceptions = FALSE, show_messages = FALSE
)
res
```
:::

Once again, we can write a model that adjusts for truncation, by re-creating the simulated truncation effect in the stan model:

```{r truncation_adjusted_delay_model}
tmod <- cmdstan_model(here("stan", "truncated_delay_model.stan"))
tmod$print(line_numbers = TRUE)
```

::: {.callout-tip}
## Take 5 minutes
Familiarise yourself with the model above.
Which line introduces the truncation, i.e. the fact that we have not been able to observe hospitalisation times beyond the cutoff of (here) 40 days?
:::

::: {.callout-note collapse="true"}
## Solution
Line 17 defines the upper limit of `onset_to_hosp` as `time_since_onset`
:::

Now we can use this model to re-estimate the parameters of the delay distribution:

```{r truncated_estimate}
tres <- tmod$sample(
  data = list(
    n = nrow(df_rt),
    onset_to_hosp = df_rt$onset_to_hosp, 
    time_since_onset = 40 - df_rt$onset_time
  ),
  refresh = 0, show_exceptions = FALSE, show_messages = FALSE
)
tres
```

::: {.callout-tip}
## Take 10 minutes
Try re-simulating the delays using different parameters of the delay distribution.
Can you establish under which conditions the bias in estimation gets worse?
:::

# Going further

- We have looked at censoring and truncation separately, but in reality often both are present. Can you combine the two in a model?
- The solutions we introduced for addressing censoring and truncation are only some possible ones for the censoring problem. There are other solutions that reduce the biase from estimation even further. For a full overview, the [review by Park et al.](https://doi.org/10.1101/2024.01.12.24301247) might be worth a read. If you are feeling adventurous, try to implement one or more of them in the stan model above - with a warning that this can get quite involved very quickly.

# Wrap up
