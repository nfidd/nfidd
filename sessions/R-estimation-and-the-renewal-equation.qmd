---
title: "R estimation and the renewal equation"
order: 5
---

```{r echo = FALSE}
set.seed(123)
```

# Objectives

The aim of this session is to introduce the renewal equation as an infection generating process, and to show how it can be used to estimate a time-varying reproduction number.

# Libraries used

In this session we will use the `nfidd` package to load the data set of infection times, the `dplyr` and `tidyr` packages for data wrangling, `ggplot2` library for plotting, the `here` library to find the stan model, and the `cmdstanr` library for using stan.
We will also use the `tidybayes` package for extracting results of the inference.

```{r libraries, message = FALSE}
library("nfidd")
library("dplyr")
library("tidyr")
library("ggplot2")
library("here")
library("cmdstanr")
library("tidybayes")
```

::: {.callout-tip}
The code in this session can be run as an interactive notebook using RStudio, or copied-and-pasted into an R session.
It needs to be run inside the course repository so that the `here()` commands below find the stan model files.
:::

# The renewal equation as a process model for infectious diseases

In this session we introduce modelling the infection process itself, in addition to modelling observation processes.

Recall that in the [session on convolutions](using-delay-distributions-to-model-the-data-generating-process-of-an-epidemic) we tried to estimate the number of infections.
In doing so we assumed that infections every day were independently identically distributed and determined only by the number of symptom onsets that they caused.
In reality, however, we know that infections are not independent.
Because infection is dependent on a pathogen being transmitted from one individual to another, we expect infections on any day to depend on existing infections, that is the number of individuals that became infectious in the recent past.
We know express this relationship via the renewal equation, which links these recent infections to the number of new infections expected on any day via the reproduction number $R$.

Remember that this is a more general concept than the _basic_ reproduction number $R_0$ which represents the average number of secondary infections caused by a single infectious individual in a completely susceptible population.
The reproduction number $R$ (sometimes called the _effective_ reproduction number) *more generally describes the average number of secondary infections caused by a single infectious individual and can in time and space as a function of differences in population level susceptibility, changes in behaviour, policy, seasonality etc.

In most mechanistic models of infectious diseases (starting with the simplest SIR model), *$* arises out of a combination of parameters and variables representing the system state, for example in a simple SIR model it can be calculated as $R_0 S/N$ where $S$ is the current number of susceptibles in the population of size $N$.
By fitting such models to data it is then possible to calculate the value of $R$ at any point in time.
The _renewal equation_ represents a more general model which includes the SIR model as a special case.
In its basic form it makes no assumption about the specific processes that cause $R$ to have a certain value and/or change over time, but instead it only relates the number of infected people in the population, the current value of the reproduction number and a delay distribution that represents the timings of when individuals infect others relative to when they themselves became infected, the so-called generation time.
Mathematically, it can be written as

$$
I_t = R_t \sum_{i=1}^{g_\mathrm{max}} I_{t-i} g_i
$$

Here, $I_t$ is the number of infected individuals on day $t$, $R_t$ is the current value of the reproduction number and $g_i$ is the probability of a secondary infection occurring $i$ days after the infector became infected themselves, with a maximum $g_\mathrm{max}$.
Remembering the [session on convolutions](using-delay-distributions-to-model-the-data-generating-process-of-an-epidemic) you will be able to identify that the renewal equation represents a convolution of the infection time series with itself, with the delay distribution given by $g_i$ and $R_t$ representing a scaling that is being applied.

::: {.callout-tip}
## Discrete vs. continuous renewal equation
The equation shown above represents the discrete version of the reproduction number.
Similar to discussions in the [session on convolutions](using-delay-distributions-to-model-the-data-generating-process-of-an-epidemic) this can be interpreted as a discretised version of a continuous one where the sum is replaced by an integral and the generation time distribution is continuous.
Note that in the discrete version we have started the sum at 1 and thus set $g_0=0$ which will make calculations easier.
:::

::: {.callout-tip}
## Instantaneous vs. case reproduction number
There are different definitions of the reproduction number that can be applied to the situation where it changes in time.
As it is defined above it is also called the _instantaneous_ reproduction number because any change affects all currently infectious individual instantaneously.
Another example of a definition is the _case_ reproduction number, where changes affect individuals at the time that they are infected but then they have a constant reproduction number throughout their infectious period.
:::

::: {.callout-tip}
## Stochastic vs. deterministic renewal equation
The version of the discrete renewal equation we wrote above is deterministic, i.e. knowing the number of infections up to a certain time point and the reproduction number we can work out exactly how many new infections we will see.
Sometimes stochasticity is added where the equation above gives the _expectation_ of $I_t$ but there exists random variation around it.
In this course we will only deal with the deterministic renewal equation.
:::

# Simulating an epidemic using the renewal equation

With the theory out of the way we now turn to simulating an epidemic using the renewal equation.
We first write a function to simulate the epidemic using the discrete renewal equation.

```{r renewal_equation, file = here::here("functions", "renewal.r")}
```

::: {.callout-note}
## Take 10 minutes
Try to understand the `renewal()` function above.
Compare it to the `convolve_with_delay()` function from the [session on convolutions](using-delay-distributions-to-model-the-data-generating-process-of-an-epidemic).
How are they similar?
Can you explain the key differences between the two?
Try calling the function with a few different probability distributions and parameters.
What kind of behaviours do you see depending on the values you put in?
:::

# Estimating R from a time series of infections

We now return to the time series of infections we used in the earlier session on epidemiological delays.

```{r load_ts, file = here::here("snippets", "load-ts.r")}
```

We use a renewal equation model in _stan_ to estimate the effective reproduction number throughout the outbreak.
We assume that the generation time is gamma-distributed with mean 4 and standard deviation 2, with a maximum of 2 weeks (14 days).
From this we can calculate that the parameters of the distribution are shape 4 and rate 1.
We can use the `censored_delay_pmf()` function defined in the [session on convolutions](using-delay-distributions-to-model-the-data-generating-process-of-an-epidemic) to use this continuous distribution with the discrete renewal equation.
If you don't have this available any more, you can load it using
```{r source_censored_delay_pmf}
source(here("functions", "censored-delay-pmf.r"))
```

To approximate the generation time PMF using random draws from the underlying continuous distribution use
```{r gen_time_pmf}
gen_time_pmf <- censored_delay_pmf(rgamma, max = 14, shape = 4, rate = 1)
```

The discrete renewal equation is only valid for generation times greater than 0 so we remove the first element of the pmf and re-normalise:

```{r gen_time_renorm}
gen_time_pmf <- gen_time_pmf[-1] ## remove first element
gen_time_pmf <- gen_time_pmf / sum(gen_time_pmf) ## renormalise
```

As always we first load the stan model and spend some time trying to understand it.

```{r stan_estimate_r}
mod <- cmdstan_model(here("stan", "estimate-r.stan"))
mod$print(line_numbers = TRUE)
```

::: {.callout-tip}
## Take 5 minutes
Familiarise yourself with the model above.
Again there is a `functions` block at the beginning of the model (lines 1-3), where we load a function called `renewal()` (line 2) from a file of the same name which can be found in the subdirectory `functions` of the `stan` directory or [viewed on the github repo](https://github.com/nfidd/nfidd/blob/main/stan/functions/renewal.stan).
The functions correspond exactly to our earlier **R** function of the same name.
Later, this functions is called in the `model` block, to generate the time series of infections using the discretised renewal model (line 19).
Which line defines priors, and which the likelihood?
:::

::: {.callout-note collapse="true"}
## Solution
Line 24 defines the prior distribution of R at each time point, and Line 25 defines the likelihood using Poisson observation uncertainty.
:::

Once again we can generate estimates from this model:

```{r r_fit}
data <- list(
  n = nrow(inf_ts) - 1,
  obs = inf_ts$infections[-1],
  I0 = inf_ts$infections[1],
  gen_time_max = length(gen_time_pmf),
  gen_time_pmf = gen_time_pmf
)
r_fit <- mod$sample(
  data = data, refresh = 0, show_exceptions = FALSE, show_messages = FALSE
)
r_fit
```

Once stan has run its chains, we can visualise the estimates:

```{r r_plot}
# Extract posterior draws
r_posterior <- r_fit |>
  gather_draws(R[infection_day]) |>
  group_by(infection_day) |>
  summarise(
    median = median(.value),
    lower = quantile(.value, 0.05),
    upper = quantile(.value, 0.95),
    .groups = "drop"
  ) |>
  mutate(infection_day = infection_day - 1)


ggplot(
  data = r_posterior,
  aes(x = infection_day, y = median, ymin = lower, ymax = upper)
) +
  geom_line() +
  geom_ribbon(alpha = 0.25, colour = NA)
```

::: {.callout-tip}
## Take 10 minutes
Simulate from the renewal equation using the `renewal()` R function we defined above with a given **R** trajectory.
For example, you could look at R increasing steadily, or suddenly, or having any other trajectory you might imagine.
Use the stan model to infer the trajectory of the reproduction number from the resulting time series of infection.
Does the model reproduce the simulated R trajectories?
:::

# Estimating R from a time series of symptom onsets

Epidemiological data is rarely, perhaps never, available as a time series of infection events.
Instead, we usually observe outcomes such as symptom onsets when individuals interact with the health system, e.g. by presenting to a hospital. 
In the [session on convolutions](using-delay-distributions-to-model-the-data-generating-process-of-an-epidemic) we simulated symptom onsets from a time series of infections by convolving with a delay:

```{r add_onsets}
source(here::here("functions", "convolve-with-delay.r"))
ip_pmf <- censored_delay_pmf(rgamma, max = 14, shape = 5, rate = 1)
onsets <- convolve_with_delay(inf_ts$infections, ip_pmf)
```

We now add this to our renewal equation model:

```{r stan_estimate_inf_and_r}
mod <- cmdstan_model(here("stan", "estimate-inf-and-r.stan"))
mod$print(line_numbers = TRUE)
```
::: {.callout-tip}
## Take 5 minutes
Familiarise yourself with the model above.
Compare it to the model used earlier in this session, and the one used in the [session on convolutions](using-delay-distributions-to-model-the-data-generating-process-of-an-epidemic).
Does this model have more parameters?
How do the assumptions about the infections time series differ between the models?
:::

We then generate estimates from this model:

```{r r_inf_fit}
data <- list(
  n = length(onsets) - 1,
  obs = onsets[-1],
  I0 = inf_ts$infections[1],
  gen_time_max = length(gen_time_pmf),
  gen_time_pmf = gen_time_pmf,
  ip_max = length(ip_pmf) - 1,
  ip_pmf = ip_pmf
)
r_inf_fit <- mod$sample(
  data = data, refresh = 0, show_exceptions = FALSE, show_messages = FALSE
)
r_inf_fit
```

We can visualise the posteriors in the same way as earlier here and in the [session on convolutions](using-delay-distributions-to-model-the-data-generating-process-of-an-epidemic). As an example one could do 

```{r r_inf_posterior}
# Extract posterior draws
posteriors <- r_inf_fit |>
  gather_draws(infections[infection_day], R[infection_day]) |>
  group_by(infection_day, .variable) |>
  summarise(
    median = median(.value),
    lower = quantile(.value, 0.05),
    upper = quantile(.value, 0.95),
    .groups = "drop"
  ) |>
  mutate(infection_day = infection_day - 1)
```

This time we extracted both the `infections` and `R` variables by infection day.
We again use this to visualise infections compared to the data used to generate the time series of onsets

```{r plot_infections}
inf_posterior <- posteriors |>
  filter(.variable == "infections")
ggplot(mapping = aes(x = infection_day)) +
  geom_line(data = inf_ts, mapping = aes(y = infections)) +
  geom_ribbon(
    data = inf_posterior,
    mapping = aes(ymin = lower, ymax = upper), alpha = 0.25, colour = NA
  )
```

and reproduction numbers

```{r plot_rt}
r_inf_posterior <- posteriors |>
  filter(.variable == "R")
ggplot(mapping = aes(x = infection_day)) +
  geom_ribbon(
    data = r_inf_posterior,
    mapping = aes(ymin = lower, ymax = upper), alpha = 0.25, colour = NA
  )
```

::: {.callout-tip}
## Take 10 minutes
Compare the results to ones from the model used earlier in this session, and the one used in the [session on convolutions](using-delay-distributions-to-model-the-data-generating-process-of-an-epidemic).
How do the models vary in the number of parameters that need to be estimated?
How do the assumptions about the infections time series differ between the models?
What do you notice about the level uncertainty in the esitmates of infections and R over the course of the time series?
If you have time you could try re-running the experiment with different R trajectories and delay distributions to see whether results change.

::: {.callout-note collapse="true"}
## Solution
We can see that using the renewal model as generative model we recover the time series of infections more accurately compared to previously when we assumed independent numbers of infections each day.
Of course, this is helped by the fact that the data was generated by a model similar to the renewal model used for inference.

Comparing the R trajectory to the earlier one

```{r plot_r_posteriors}
r_inf_posterior <- r_inf_posterior |>
  select(-.variable) |>
  mutate(data = "onsets")
## earlier posterior (see previous section)
r_posterior <- r_posterior |>
  mutate(data = "infections")
both_posteriors <- rbind(
  r_inf_posterior,
  r_posterior
)

ggplot(
  both_posteriors,
  mapping = aes(
    x = infection_day, ymin = lower, ymax = upper, fill = data
  )
) +
  geom_ribbon(alpha = 0.25, colour = NA) +
  scale_fill_brewer(palette = "Set1")
```

We can see that the estimates are similar, but the onsets one is smoother due to the smoothing induced by the convolution of infections to symptom onsets

:::
:::

# Going further

- We have used symptom onsets under the assumption that every infected person develops symptoms. 
Earlier we also created a time series of hospitalisatoin under the assumption that only a proportion (e.g., 30%) of symptomatic individuals get hospitalised. 
How would you change the model in this case?
What are the implications for inference?



