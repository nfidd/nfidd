---
title: "Biases in delay distributions"
order: 3
---

# Introduction

So far, we've looked at the uncertainty of the time delays between epidemiological events. The next challenge is that our information on these delays is usually biased, especially when we're analysing data in real time. We'll consider two types of biases that commonly occur in reported infectious disease data: 

- *Censoring*: when we know an event occurred at some time, but not exactly when.
- *Truncation*: when not enough time has passed for all the relevant epidemiological events to occur or be observed.

We can again handle these by including them as uncertain parameters in the modelling process.

## Slides

[Introduction to biases in epidemiological delays](slides/introduction-to-biases-in-epidemiological-delays)

## Objectives

In this session, we'll introduce censoring and right truncation as typical properties of infectious disease data sets, using the delay from symptom onset to hospitalisation as an example.

::: {.callout-note collapse="true"}

# Setup

## Source file

The source file of this session is located at `sessions/biases-in-delay-distributions.qmd`.

## Libraries used

In this session we will use the `nfidd` package to load a data set of infection times and access stan models and helper functions, the `ggplot2` package for plotting, the `dplyr` and `tidyr` packages to wrangle data, the `lubridate` package to deal with dates.

```{r libraries, message = FALSE}
library("nfidd")
library("ggplot2")
library("dplyr")
library("tidyr")
library("lubridate")
```

::: callout-tip
The best way to interact with the material is via the [Visual Editor](https://docs.posit.co/ide/user/ide/guide/documents/visual-editor.html) of RStudio.
:::

## Initialisation

We set a random seed for reproducibility. 
Setting this ensures that you should get exactly the same results on your computer as we do.
We also set an option that makes `cmdstanr` show line numbers when printing model code.
This is not strictly necessary but will help us talk about the models.

```{r}
set.seed(123)
options(cmdstanr_print_line_numbers = TRUE)
```

:::

# Load data

We will use the same simulated data set as in the [session on delay distributions](delay-distributions#simulating-delayed-epidemiological-data).

::: callout-note
Remember, in this outbreak we are assuming:

-   the incubation period is **gamma**-distributed with **shape 5** and **rate 1**, i.e. a mean of 5 days
-   the time from onset to hospital admission is **lognormally**-distributed, with **meanlog 1.75** and **sdlog 0.5**, i.e. a mean delay of about a week
:::

We use the same function we used in that session to simulate symptom onset and hospitalisation data.

```{r inf_hosp_solution}
df <- add_delays(infection_times)
```

This creates the `df` data frame that we can inspect e.g. using

```{r show_df}
head(df)
```

# Dates, not days: censoring

Data on health outcomes are usually not recorded in the way that we have used so far in this session: as a numeric time since a given start date.
Instead, we usually deal with *dates*.

We can make our simulated dataset a bit more realistic by rounding down the infection times to an integer number.

```{r censored_times}
# Use the floor() function to round down to integers
df_dates <- df |>
  mutate(
    infection_time = floor(infection_time),
    onset_time = floor(onset_time),
    hosp_time = floor(hosp_time)
  )
head(df_dates)
```

::: {.callout-note}
As before we are still not working with dates but numbers.
This makes handling the data easier - we don't have to make any conversions before using the data in stan.
:::

Each of the numbers now represent the number of days that have passed since the start of the outbreak.
That is, each of the numbers correspond to a day.
In that sense, the data is more like typical data we get from infectious disease outbreaks, where we would usually have a line list with key events such as symptom onset or death reported by a *date*.
In statistical terms, we call the delay *double interval censored*: "double" because the delays represent the time between two events that are both censored; and "interval" because all we know about the timings of the events is that they happened in a certain time interval (between 0:00 and 23:59 on the recorded day).

## Estimating delay distributions accounting for censoring

Let's estimate the time from symptom onset to hospitalisation with the censored data.

A naïve approach to estimating the delay would be to ignore the fact that the data are censored.
To estimate the delay from onset to hospitalisation, we could just use the difference between the censored times, which is an integer (the number of days).

```{r integer-delays}
df_dates <- df_dates |>
  mutate(
    incubation_period = onset_time - infection_time,
    onset_to_hosp = hosp_time - onset_time
  )
```

::: callout-tip
## Take 5 minutes

Fit the lognormal model used in the [session on delay distributions](delay-distributions#estimating-delay-distributions) to the estimates from the rounded data, i.e. using the `df_dates` data set.
Do you still recover the parameters that we put in?
:::

::: {.callout-note collapse="true"}
## Solution

```{r df_dates_solution, results = 'hide', message = FALSE}
mod <- nfidd_cmdstan_model("lognormal")
res <- mod$sample(
  data = list(
    n = nrow(na.omit(df_dates)),
    y = na.omit(df_dates)$onset_to_hosp
  )
)
```

```{r df_dates_solution_summary}
res
```

Usually the estimates will be further from the "true" parameters than before when we worked with the unrounded data.
:::

To account for double interval censoring, we need to modify the model to include the fact that we don't know when exactly on any given day the event happened.
For example, if we know that symptom onset of an individual occurred on 20 June, 2024, and they were admitted to hospital on 22 June, 2024, this could mean an onset-to-hospitalisation delay from 1 day (onset at 23:59 on the 20th, admitted at 0:01 on the 22nd) to 3 days (onset at 0:01 on the 20th, admitted at 23:59 on the 22nd).

We can use this in our delay estimation by making the exact time of the events based on the dates given part of the estimation procedure:

```{r censoring_adjusted_delay_model}
cmod <- nfidd_cmdstan_model("censored-delay-model")
cmod
```

::: callout-tip
## Take 5 minutes

Familiarise yourself with the model above.
Do you understand all the lines?
Which line(s) define the parameter prior distribution(s), which one(s) the likelihood, and which one(s) reflect that we have now provided the delay as the difference in integer days?
:::

::: {.callout-note collapse="true"}
## Solution

Lines 21-24 define the parametric prior distributions (for parameters meanlog and sdlog, and the estimates of exact times of events).
Line 27 defines the likelihood.
Lines 15-17 reflect the integer delays, adjusted by the estimated times of day.
:::

Now we can use this model to re-estimate the parameters of the delay distribution:

```{r censored_estimate, results = 'hide', message = FALSE}
cres <- cmod$sample(
  data = list(
    n = nrow(na.omit(df_dates)),
    onset_to_hosp = na.omit(df_dates)$onset_to_hosp
  )
)
```

```{r censored_estimate_summary}
cres
```

::: callout-tip
## Take 10 minutes

Try re-simulating the delays using different parameters of the delay distribution.
Can you establish under which conditions the bias in estimation gets worse?
:::

# Real-time estimation: truncation

The data set we have looked at so far in this session is a "final" data set representing an outbreak that has come and gone.
However, information on delay distribution is often important during ongoing outbreaks as they can inform nowcasts and forecasts and help with broader interpretation of data.

Estimating delays in real time comes with particular challenges, as the timing of the cut-off might introduce a bias.
If, for example, infections are exponentially increasing then there will be disproportionately more people with recent symptom onset.
Without adjustment, this would artificially decrease the estimate of the mean delay compared to its true value for all infections.
This happens because most infections are recent (due to the exponential increase), but later symptom onsets amongst these have not had a chance to happen yet.

Once again, we can simulate this effect, for example by imagining we would like to make an estimate on day 70 of our outbreak.
Let us work with the original, un-censored data for the time from onset to hospitalisation so as to look at the issue of truncation in isolation:

```{r truncated_df}
df_realtime <- df |>
  mutate(onset_to_hosp = hosp_time - onset_time) |>
  filter(hosp_time <= 70)
```

## Estimating delay distributions accounting for truncation

If we take the naïve mean of delays we get an underestimate as expected:

```{r mean_truncated}
# truncated mean delay
mean(df_realtime$onset_to_hosp)
# compare with the mean delay over the full outbreak
mean(df$hosp_time - df$onset_time, na.rm=TRUE)
```

::: callout-tip
## Take 5 minutes

Fit the lognormal model used above to the estimates from the truncated data, i.e. using the `df_realtime` data set.
How far away from the "true" parameters do you end up?
:::

::: {.callout-note collapse="true"}
## Solution

```{r df_realtime_solution, results = 'hide', message = FALSE}
res <- mod$sample(
  data = list(
    n = nrow(na.omit(df_realtime)),
    y = na.omit(df_realtime)$onset_to_hosp
  )
)
```

```{r df_realtime_solution_summary}
res
```
:::

Once again, we can write a model that adjusts for truncation, by re-creating the simulated truncation effect in the stan model:

```{r truncation_adjusted_delay_model}
tmod <- nfidd_cmdstan_model("truncated-delay-model")
tmod
```

::: callout-tip
## Take 5 minutes

Familiarise yourself with the model above.
Which line introduces the truncation, i.e. the fact that we have not been able to observe hospitalisation times beyond the cutoff of (here) 70 days?
:::

::: {.callout-note collapse="true"}
## Solution

Line 17 defines the upper limit of `onset_to_hosp` as `time_since_onset`.
:::

Now we can use this model to re-estimate the parameters of the delay distribution:

```{r truncated_estimate, results = 'hide', message = FALSE}
tres <- tmod$sample(
  data = list(
    n = nrow(df_realtime),
    onset_to_hosp = df_realtime$onset_to_hosp, 
    time_since_onset = 70 - df_realtime$onset_time
  )
)
```

```{r truncated_estimate_summary}
tres
```

::: callout-tip
## Take 10 minutes

Try re-simulating the delays using different parameters of the delay distribution.
Can you establish under which conditions the bias in estimation gets worse?
:::

# Going further

-   We have looked at censoring and truncation separately, but in reality often both are present. Can you combine the two in a model?
-   The solutions we introduced for addressing censoring and truncation are only some possible ones for the censoring problem. There are other solutions that reduce the biases from estimation even further. For a full overview, the [review by Park et al.](https://doi.org/10.1101/2024.01.12.24301247) might be worth a read. If you are feeling adventurous, try to implement one or more of them in the stan model above - with a warning that this can get quite involved very quickly.

# Wrap up
