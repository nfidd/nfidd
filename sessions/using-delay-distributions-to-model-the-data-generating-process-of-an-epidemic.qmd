---
title: "Using delay distributions to model the data generating process"
order: 4
---

# Introduction

We've now developed a good idea of how epidemiological time delays affect our understanding of an evolving outbreak. So far, we've been working with individual line-list data. However, we usually want to model how an outbreak evolves through a whole population. The aim of this session is to introduce how delay distributions can be used to model population-level data generating process during an epidemic. 

This means working with aggregated count data. This creates some new issues in correctly accounting for uncertainty. We handle population-level data using *convolutions* as a way of combining count data with a distribution of individual probabilities. We will have to adjust our continuous probability distributions to work with this using *discretisation*. We'll then need to re-introduce additional uncertainty to account for the observation process at a population level.

## Slides

- [Delay distributions at the population level](slides/convolutions)

## Objectives

In this session, we'll focus on the delay from infection to symptom onset at a population level.
First, we will introduce the techniques of convolution and discretisation. We'll apply these to an aggregated time series of infections in order to simulate observed symptom onsets.
Then, we'll use those simulated symptom onsets to try and reconstruct a time series of infections.

::: {.callout-note collapse="true"}

# Setup

## Source file

The source file of this session is located at `sessions/using-delay-distributions-to-model-the-data-generating-process-of-an-epidemic.qmd`.

## Libraries used

In this session we will use the `nfidd` package to load a data set of infection times and access stan models and helper functions, the `dplyr` and `tidyr` packages for data wrangling, the `ggplot2` library for plotting and the `tidybayes` package for extracting results of the inference.

```{r libraries, message = FALSE}
library("nfidd")
library("dplyr")
library("tidyr")
library("ggplot2")
library("tidybayes")
```

::: callout-tip
The best way to interact with the material is via the [Visual Editor](https://docs.posit.co/ide/user/ide/guide/documents/visual-editor.html) of RStudio.
:::

## Initialisation

We set a random seed for reproducibility. 
Setting this ensures that you should get exactly the same results on your computer as we do.
We also set an option that makes `cmdstanr` show line numbers when printing model code.
This is not strictly necessary but will help us talk about the models.

```{r}
set.seed(123)
options(cmdstanr_print_line_numbers = TRUE)
```

:::

# Simulating observations from a time series of infections

As before we first simulate the process that generates the data we typically observe.
In this session, we'll focus on the process from infection to symptom onset.
Then we'll use the same model to conduct inference.

## Delay distributions and convolutions

In the last session we simulated *individual outcomes* from a delay distribution, and then re-estimated the corresponding parameters.
However, sometimes we do not have data on these individual-level outcomes, either because they are not recorded or because they cannot be shared, for example due to privacy concerns.
At the population level, individual-level delays translate into *convolutions*.

If we have a time series of infections $I_t$ ($t=1, 2, 3, \ldots, t_\mathrm{max}$), where $t$ denotes the day on which the infections occur, and observable outcomes occur with a delay given by a delay distribution $p_i$ ($i=0, 1, 2, \dots, p_\mathrm{max}$), where $i$ is the number of days after infection that the observation happens, then the number of observable outcomes $C_t$ on day $t$ is given by

$$
C_t = \sum_{i=0}^{i=p_\mathrm{max}} I_{t-i} p_i
$$

In other words, the number of observable outcomes on day $t$ is given by the sum of infections on all previous days multiplied by the probability that those infections are observed on day $t$.
For example, the observable outcomes $C_t$ could be the number of symptom onsets on day $t$ and $p_i$ is the incubation period.

We can use the same data as in the [session on biases in delay distributions](biases-in-delay-distributions#create-data-set), but this time we first aggregate this into a daily time series of infections.
You can do this using:

```{r aggregate}
inf_ts <- make_daily_infections(infection_times)
```

::: callout-note
As before you can look at the code of the function by typing `make_daily_infections`.
The second part of this function is used to add days without infections with a zero count.
This will make our calculations easier later (as otherwise we would have to try and detect these in any models that used this data which could be complicated).
:::

And look at the first few rows of the daily aggregated data:

```{r display-aggregate}
head(inf_ts)
```

Now we can convolve the time series with a delay distribution to get a time series of outcomes as suggested above.

#### Discretising a delay distribution

In our first session, we decided to assume the delay from infection to symptom onset had a gamma distribution.
However, if we want to use the gamma distribution with shape 5 and rate 1 as before, we face a familiar issue.
The gamma distribution is a *continuous* distribution, but now our delay data are in days which are *discrete* entities.
We will assume that both events that make up the delay (here infection and symptom onset) are observed as daily counts (e.g. as number of infections/symptom onsets by calendar date).
Therefore, both observations are **censored** (as events are rounded to the nearest date).
This means that our distribution is **double interval censored** which we encountered in the [the biases in delay distribution session](sessions/biases-in-delay-distributions), so we need to use the same ideas introduced in that session. 

::: {.callout-note collapse=true}
#### Mathematical Definition (optional): Discretising a delay distribution subject to double interval censoring

The cumulative distribution function (CDF) ($F(t)$) of a distribution that has a daily censored primary event can be expressed as,

$$
F^*(t) = \int_0^1 F(t - u) du
$$

In effect, this is saying that the daily censored CDF is the average of the continuous distributions CDF over all possible event times (here between 0 and 1).

The probability mass function (PMF) of this distribution when observed as a daily process (i.e. the secondary event is also daily censored) is then

$$
f_t \propto F^*(t + 1) - F^*(t - 1)
$$

The important point is that the ultimately observed PMF is a combination of a primary event daily censoring process and a secondary event daily censoring process.
:::

We can think about this via simulation.
We do so by generating many replicates of the corresponding random delay, taking into account that we have already rounded down our infection times to infection days.
This means that discretising a delay in this context is **double censoring** as we discussed in the [the biases in delay distribution session](sessions/biases-in-delay-distributions).
In the absence of any other information or model, we assume for our simulation that infection occurred at some random time during the day, with each time equally likely.
We can then apply the incubation period using a continuous probability distribution, before once again rounding down to get the day of symptom onset (mimicking daily reporting).
We repeat this many times to get the probability mass function that allows us to go from infection days to symptom onset days.

You can view the function we have written do this using:

```{r discretise_2_day_window}
censored_delay_pmf
```

::: callout-note
## Take 5 minutes

Try to understand the `censored_delay_pmf()` function above.
Try it with a few different probability distributions and parameters, e.g. for the parameters given above and a maximum delay of 2 weeks (14 days) it would be:

```{r discretised_gamma}
gamma_pmf <- censored_delay_pmf(rgamma, max = 14, shape = 5, rate = 1)
gamma_pmf

plot(gamma_pmf)
```
:::

#### Applying a convolution

Next we apply a convolution with the discretised incubation period distribution to the time series of infections, to generate a time series of symptom onsets.
The function we have written to do this is called `convolve_with_delay`

```{r convolution}
convolve_with_delay
```

::: callout-tip
## Take 5 minutes

Try to understand the `convolve_with_delay()` function above.
Try it with a few different time series and delay distributions.
How would you create the time series of symptom onsets from infections, using the discretised gamma distribution created above (saved in `gamma_pmf`)?
:::

::: {.callout-note collapse="true"}
## Solution

```{r applied_convolution}
onsets <- convolve_with_delay(inf_ts$infections, gamma_pmf)
```
:::

We can plot these symptom onsets:

```{r convolution_plot}
combined <- inf_ts |>
  rename(time = infection_day) |>
  mutate(onsets = onsets)
ggplot(combined, aes(x = time, y = onsets)) +
  geom_bar(stat = "identity")
```

Do they look similar to the plot of symptom onsets in the [session on delay distributions](delay-distributions#simulating-delayed-epidemiological-data)?

## Observation uncertainty

Usually not all data are perfectly observed.
Also, the convolution we applied is a *deterministic* operation that brushes over the fact that individual delays are random.
We should therefore find another way to model the variation these processes introduce.

Given that we are now dealing with count data a natural choice is the Poisson distribution.
We can use this to generate uncertainty around our convolved data.

```{r uncertain}
combined <- combined |>
  mutate(observed = rpois(n(), onsets))
```

::: callout-tip
## Take 5 minutes

Does a plot of these observations look more like the plots from the [session on delay distributions](delay-distributions#simulating-delayed-epidemiological-data) than the convolution plotted above?
:::

::: {.callout-note collapse="true"}
## Solution

```{r plot-with-poisson}
ggplot(combined, aes(x = time, y = observed)) +
  geom_bar(stat = "identity")
```
:::

# Estimating a time series of infections

As in previous sessions, we don't usually have data on infections. We now create a model that uses symptom onsets to estimate the number of infections over time. We'll base the model on an uninformed prior and work forward from what we know about the observation process.

```{r stan_estimate_infections}
mod <- nfidd_cmdstan_model("estimate-infections")
mod
```

::: callout-tip
## Take 10 minutes

Familiarise yourself with the model above.
Unlike before there is now a `functions` block at the beginning of the model (lines 1-3), where we load a function called `convolve_with_delay()` (line 2) from a file of the same name which can be found in the subdirectory `functions` of the `stan` directory or [viewed on the github repo](https://github.com/nfidd/nfidd/blob/main/stan/functions/convolve_with_delay.stan).
The functions correspond exactly to our earlier **R** function of the same name.
Later, this functions is called in the `model` block, to generate the time series of symptom onsets (line 18).

What is the prior assumption on the daily number of infections?
Which line defines the likelihood, and how does it relate to the section about observation uncertainty above?
:::

::: {.callout-note collapse="true"}
## Solution

The model assumes that infections every day are independent from infections on any other day (line 23) and determined only by the number of symptom onsets that they result in (line 18).
Line 24 defines the likelihood, and it does so using the Poisson observation uncertainty we used above.
:::

We can now use this model to conduct inference, i.e. to try to reconstruct the time series of infections from the time series of onsets that we generated earlier.

```{r inf_fit, results = 'hide', message = FALSE}
data <- list(
  n = nrow(combined),
  obs = combined$observed,
  ip_max = length(gamma_pmf) - 1,
  ip_pmf = gamma_pmf
)
inf_fit <- mod$sample(data = data, parallel_chains = 4)
```

::: callout-caution
Note that this code might take a few minutes to run.
We have added the `parallel_chains` option to make use of any paralle hardware you may ave.
If you don't have 4 computing cores and/or the code runs very slowly, you could try only running 2 chains (`chains = 2`) and/or fewer samples (`iter_warmup = 500, iter_sampling = 500`).
:::

::: callout-tip
In this model, we have estimated many more parameters than in the previous models: instead of e.g. 2 parameters of a probability distribution, we now have a total of `r nrow(onsets)` time points for which we estimate the number of infections.
This is because we don't have a model for the *process* that generates infections.
How would this be different if we e.g. used an SIR model here?
:::

We can see the first few estimates of the number of infections using:

```{r inf_summary}
inf_fit
```

Again, we can do a posterior predictive check by plotting the modelled estimates of the time series of infections (with uncertainty) against our original data.
Does it look like a good fit?

```{r inf_ppc}
# Extract posterior draws
inf_posterior <- inf_fit |>
  gather_draws(infections[infection_day]) |>
  ungroup() |> 
  mutate(infection_day = infection_day - 1) |>
  filter(.draw %in% sample(.draw, 100))

ggplot(mapping = aes(x = infection_day)) +
  geom_line(
    data = inf_posterior, mapping = aes(y = .value, group = .draw), alpha = 0.1
  ) +
  geom_line(data = inf_ts, mapping = aes(y = infections), colour = "red") +
  labs(title = "Infections per day",
       subtitle = "True data (red), and sample of estimated trajectories (black)")
```

::: callout-tip
This time we used the `gather_draws()` function included in `tidybayes` to extract the inference results.
This is particularly useful when dealing with arrays such as `inference` because it allows to extract them with a given index (here: `[day]`).
:::

# Going further

-   Above, we used a Poisson distribution to characterise uncertainty.
    In the Poisson distribution, the variance is the same as the mean.
    Another common choice is the negative binomial distribution, which has a more flexible relationship between variance and mean.
    If you re-did the analysis above with the negative binomial distribution, what would be the difference?

-   We could have used the individual-level model of the previous section to try to estimate the number of infections with a known delay distribution by estimating each individual infection time.
    How would this look in stan code?
    Would you expect it to yield a different result?

# Wrap up
